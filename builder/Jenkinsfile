pipeline {
    agent any

    parameters {
        string(name: 'TELEGRAM_TOKEN', defaultValue: '', description: '–¢–æ–∫–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
        string(name: 'TELEGRAM_CHAT_ID', defaultValue: '', description: 'ID –∫–∞–Ω–∞–ª–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
        string(name: 'VERSION', defaultValue: '1.1.1', description: '–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –ø–∞–∫–µ—Ç–∞')
        choice(name: 'STAGE',   choices: ['alpha', 'beta', 'final'], description: '–¢–µ–∫—É—â–∞—è —Å—Ç–∞–¥–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏')
        string(name: 'BUILD',   defaultValue: '1', description: '–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è —Å–±–æ—Ä–∫–∏')
        booleanParam(name: 'FORCE_TOOLCHAIN_REBUILD', defaultValue: false, description: '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ toolchain')
    }

    environment {
        SYSTEM = 'Entware' 
        ENTWARE_REPO_URL = 'https://github.com/Entware/Entware.git'
        DOCKER_IMAGE = 'entware-build-env'
        USER_NAME = 'master'
        GITHUB_REPO = 'git@github.com:qzeleza/kvas.git'
        ROUTER_IP = credentials('ssh-github-key')
        ROUTER_PORT = '1221'
        BUILD_PATH = '/build/entware'
        USER_ID = 115
        GROUP_ID = 123
        APP_VERSION="${params.VERSION}-${params.STAGE}${params.BUILD}"
    }
    
    
    options {
        timestamps()
        timeout(time: 2, unit: 'HOURS')
        disableConcurrentBuilds()
    }

    stages {

        stage("–û—á–∏—Å—Ç–∫–∞ —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏ Jenkins") {
            steps {
                cleanWs()
            }
        }
        
        // stage('–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ') {
        //     steps {
        //         git branch: 'main', 
        //         url: env.GITHUB_REPO
        //     }
        // }


        stage("–°–±–æ—Ä–∫–∞ Entware –æ–±—Ä–∞–∑–∞") {
            steps {
                script {
                    
                    if ( isDockerImageExists(env.DOCKER_IMAGE)) {
                        docker.build(env.DOCKER_IMAGE, "--build-arg USER_NAME=${env.USER_NAME} --build-arg APP_PATH=/home/${env.USER_NAME}/${env.JOB_NAME} --build-arg BUILDING_PATH=${BUILD_PATH} --pull --tag ${env.DOCKER_IMAGE}  -f builder/Dockerfile .")
                    }
                }
            }
            post {
                success {
                    script {
                        sendTelegramMessage("‚úÖ –û–±—Ä–∞–∑ ${env.SYSTEM} —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                    }
                }
                failure {
                    script {
                        sendTelegramMessage("‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ ${env.SYSTEM} –æ–±—Ä–∞–∑–∞!")
                    }
                }
            }
        }
        stage("–°–±–æ—Ä–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ä–∏—è Entware –∏ —Å–∞–º–æ–≥–æ –ø–∞–∫–µ—Ç–∞") {
            steps {
                script{
                    docker.image("${env.DOCKER_IMAGE}").withRun("--mount type=bind,source=${env.WORKSPACE}/output,target=/output --mount type=bind,source=${env.WORKSPACE}/build,target=/build") {
                    sh """
                        if [ ${params.FORCE_TOOLCHAIN_REBUILD} == 'true' ]; then 
                            # —É–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É —Å–±–æ—Ä–∫–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–µ—Ä–µ—Å–±–æ—Ä–∫—É –∑–∞–Ω–æ–≤–æ
                            rm -rf ${env.BUILD_PATH} 
                        fi
                        builder/builder all ${env.JOB_NAME} ${env.BUILD_PATH} ${env.ENTWARE_REPO_URL}
                    """
                }
            }
            post {
                success {
                    script {
                        sendTelegramMessage("‚úÖ –ü–∞–∫–µ—Ç —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ: ${params.VERSION}-${params.STAGE}")
                    }
                }
                failure {
                    script {
                        sendTelegramMessage("‚ùå –ü–∞–∫–µ—Ç —Å–æ–±—Ä–∞–Ω —Å –æ—à–∏–±–∫–∞–º–∏: ${params.VERSION}-${params.STAGE}")
                    }
                }
            }
        }
        stage('–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –Ω–∞ —Ä–æ—É—Ç–µ—Ä') {
            steps {
                sshagent(credentials: ['ssh-key-for-router']) {
                    sh "scp /app/${env.JOB_NAME}/packages/${env.JOB_NAME}.*.ipk root@${env.ROUTER_IP}:/opt/tmp/"
                    sh "ssh root@${env.ROUTER_IP} opkg install /opt/tmp/${env.JOB_NAME}.*.ipk"
                }
            }
            post {
                success {
                    script {
                        sendTelegramMessage("‚úÖ –ü–∞–∫–µ—Ç —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ: ${params.VERSION}-${params.STAGE}")
                    }
                }
                failure {
                    script {
                        sendTelegramMessage("‚ùå –ü–∞–∫–µ—Ç —Å–æ–±—Ä–∞–Ω —Å –æ—à–∏–±–∫–∞–º–∏: ${params.VERSION}-${params.STAGE}")
                    }
                }
            }
        }
        stage('Run Tests') {
            steps {
                sshagent(['router-ssh-key']) {
                    sh """
                        ssh -p ${params.ROUTER_PORT} root@${params.ROUTER_IP} '/usr/bin/test-package'
                    """
                }
            }
            post {
                success {
                    script {
                        sendTelegramMessage("‚úÖ –ü–∞–∫–µ—Ç —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ: ${params.VERSION}-${params.STAGE}")
                    }
                }
                failure {
                    script {
                        sendTelegramMessage("‚ùå –ü–∞–∫–µ—Ç —Å–æ–±—Ä–∞–Ω —Å –æ—à–∏–±–∫–∞–º–∏: ${params.VERSION}-${params.STAGE}")
                    }
                }
            }
        }
        stage('Run Package') {
            steps {
                sshagent(credentials: ['ssh-key-for-router']) {
                    sh "ssh user@${env.ROUTER_IP} /etc/init.d/your_service start"
                }
            }
            post {
                success {
                    script {
                        sendTelegramMessage("‚úÖ –ü–∞–∫–µ—Ç —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ: ${params.VERSION}-${params.STAGE}")
                    }
                }
                failure {
                    script {
                        sendTelegramMessage("‚ùå –ü–∞–∫–µ—Ç —Å–æ–±—Ä–∞–Ω —Å –æ—à–∏–±–∫–∞–º–∏: ${params.VERSION}-${params.STAGE}")
                    }
                }
            }
        }
        stage('Release to GitHub') {
            when {
                expression { currentBuild.resultIsBetterOrEqualTo('SUCCESS') }
            }
            steps {
                script {
                    def releaseData = """
                        {
                            "tag_name": "v${PACKAGE_VERSION}",
                            "name": "Release ${PACKAGE_VERSION}",
                            "body": "Automated release ${PACKAGE_VERSION}"
                        }
                    """
                    
                    // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ –Ω–∞ GitHub
                    def response = sh(script: """
                        curl -X POST \
                            -H "Authorization: token ${GITHUB_TOKEN}" \
                            -H "Content-Type: application/json" \
                            -d '${releaseData}' \
                            https://api.github.com/repos/owner/repo/releases
                    """, returnStdout: true)

                    // –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
                    def releaseId = sh(script: "echo '${response}' | jq -r .id", returnStdout: true).trim()
                    sh """
                        curl -X POST \
                            -H "Authorization: token ${GITHUB_TOKEN}" \
                            -H "Content-Type: application/octet-stream" \
                            --data-binary @output/*.ipk \
                            https://uploads.github.com/repos/owner/repo/releases/${releaseId}/assets?name=package-${PACKAGE_VERSION}.ipk
                    """
                }
            }
            post {
                success {
                    script {
                        sendTelegramMessage("üöÄ Successfully released to GitHub: ${PACKAGE_VERSION}")
                    }
                }
                failure {
                    script {
                        sendTelegramMessage("‚ùå Package build failed: ${PACKAGE_VERSION}")
                    }
                }
            }
        }
    }
    post {
        success {
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Å–±–æ—Ä–∫–µ –≤ –¢–µ–ª–µ–≥—Ä–∞–º
            script {
                def mess = "‚úÖ –°–±–æ—Ä–∫–∞ –ø–∞–∫–µ—Ç–∞ ${params.VERSION}-${params.STAGE} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
                sendTelegramMessage(mess)
                echo ${mess}
            }
        }
        failure {
            script {
                // –ó–¥–µ—Å—å –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–µ
                def mess = "‚ùå –°–±–æ—Ä–∫–∞ –ø–∞–∫–µ—Ç–∞: ${params.VERSION}-${params.STAGE} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ c –æ—à–∏–±–∫–∞–º–∏!"
                sendTelegramMessage(mess)
                echo ${mess}
            }
        }
        unstable {
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Å–±–æ—Ä–∫–µ
            script {
                // –ó–¥–µ—Å—å –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–µ
                def mess = "–°–±–æ—Ä–∫–∞ –ø–∞–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏."
                sendTelegramMessage(mess)
                echo ${mess}
            }
        }
        always {
            // –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –∏ –æ—á–∏—â–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            archiveArtifacts artifacts: '**/*.ipk', allowEmptyArchive: true
            cleanWs() // –û—á–∏—â–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        }
    }
}
